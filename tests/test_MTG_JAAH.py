# -*- coding: utf-8 -*-

import numpy as np

from mirdata import MTG_JAAH, utils
from tests.test_utils import run_track_tests


def test_track():
    default_trackid = '0'
    data_home = '../tests/resources/mir_datasets/MTG_JAAH'
    track = MTG_JAAH.Track(default_trackid, data_home=data_home)

    expected_attributes = {
        'audio_path': '../tests/resources/mir_datasets/MTG_JAAH/audio/airegin.flac',
        'ann_path': '../tests/resources/mir_datasets/MTG_JAAH/annotations/airegin.json',
        'labs_path': '../tests/resources/mir_datasets/MTG_JAAH/labs/airegin.lab',
        'track_id': '0'
    }

    expected_property_types = {
        'chords': utils.ChordData,
        'beats': utils.BeatData,
        'sections': utils.SectionData,
        'key': str,
        'artist': str,
        'tuning': float,
        'mbid': str,
        'metre': str,
        'duration': float
    }

    run_track_tests(track, expected_attributes, expected_property_types)

    audio, sr = track.audio
    assert sr == 44100, 'sample rate {} is not 44100'.format(sr)


def test_load_beats():
    ann_path = (
        'resources/mir_datasets/MTG_JAAH/annotations/airegin.json'
    )
    beat_data = MTG_JAAH.load_beats(ann_path)

    assert type(beat_data) == utils.BeatData, 'beat_data is not type utils.BeatData'
    assert (
            type(beat_data.beat_times) == np.ndarray
    ), 'beat_data.beat_times is not an np.ndarray'
    assert (
            type(beat_data.beat_positions) == np.ndarray
    ), 'beat_data.beat_positions is not an np.ndarray'
    print(beat_data.beat_positions)
    assert np.array_equal(
        beat_data.beat_times,
        np.array([0.41, 0.68, 0.95, 1.22, 1.48, 1.75, 2.03, 2.29, 2.56, 2.82,
                  3.08, 3.34, 3.61, 3.87, 4.12, 4.39, 4.67, 4.94, 5.2, 5.47,
                  5.74, 6.02, 6.29, 6.55, 6.83, 7.1, 7.37, 7.64, 7.91, 8.18,
                  8.45, 8.71, 8.99, 9.25, 9.53, 9.8, 10.07, 10.33, 10.59, 10.85,
                  11.12, 11.39, 11.67, 11.94, 12.21, 12.47, 12.75, 13.02, 13.29, 13.55,
                  13.83, 14.09, 14.36, 14.64, 14.92, 15.2, 15.48, 15.75, 16.04, 16.31,
                  16.57, 16.84, 17.11, 17.38, 17.66, 17.92, 18.2, 18.46, 18.74, 19.,
                  19.28, 19.55, 19.83, 20.1, 20.38, 20.66, 20.94, 21.21, 21.49, 21.75,
                  22.03, 22.29, 22.57, 22.84, 23.13, 23.4, 23.68, 23.95, 24.23, 24.49,
                  24.77, 25.03, 25.31, 25.57, 25.84, 26.11, 26.39, 26.65, 26.93, 27.19,
                  27.47, 27.73, 28.01, 28.28, 28.55, 28.82, 29.09, 29.35, 29.63, 29.9,
                  30.16, 30.43, 30.72, 31., 31.28, 31.55, 31.82, 32.1, 32.37, 32.64,
                  32.91, 33.18, 33.45, 33.72, 33.99, 34.26, 34.52, 34.79, 35.07, 35.34,
                  35.61, 35.87, 36.14, 36.42, 36.68, 36.95, 37.24, 37.51, 37.8, 38.06,
                  38.34, 38.6, 38.87, 39.14, 39.42, 39.68, 39.96, 40.23, 40.5, 40.77,
                  41.04, 41.31, 41.59, 41.87, 42.14, 42.42, 42.7, 42.98, 43.26, 43.52,
                  43.8, 44.06, 44.34, 44.6, 44.88, 45.14, 45.41, 45.68, 45.96, 46.24,
                  46.53, 46.8, 47.09, 47.36, 47.64, 47.92, 48.19, 48.46, 48.74, 49.02,
                  49.3, 49.57, 49.85, 50.13, 50.41, 50.68, 50.95, 51.22, 51.5, 51.76,
                  52.04, 52.31, 52.59, 52.87, 53.15, 53.43, 53.71, 53.98, 54.26, 54.54,
                  54.82, 55.1, 55.37, 55.64, 55.92, 56.18, 56.46, 56.73, 57., 57.27,
                  57.54, 57.82, 58.1, 58.38, 58.66, 58.93, 59.21, 59.49, 59.77, 60.04,
                  60.32, 60.58, 60.86, 61.13, 61.4, 61.68, 61.96, 62.24, 62.52, 62.79,
                  63.07, 63.35, 63.62, 63.89, 64.16, 64.43, 64.71, 64.97, 65.25, 65.52,
                  65.79, 66.06, 66.34, 66.62, 66.9, 67.17, 67.46, 67.73, 68.02, 68.29,
                  68.56, 68.83, 69.1, 69.37, 69.65, 69.91, 70.19, 70.45, 70.72, 71.,
                  71.27, 71.53, 71.81, 72.08, 72.35, 72.62, 72.89, 73.16, 73.43, 73.71,
                  73.99, 74.26, 74.55, 74.81, 75.08, 75.35, 75.63, 75.89, 76.17, 76.43,
                  76.71, 76.98, 77.25, 77.53, 77.81, 78.08, 78.36, 78.63, 78.91, 79.17,
                  79.44, 79.71, 79.99, 80.25, 80.53, 80.8, 81.07, 81.34, 81.61, 81.89,
                  82.17, 82.44, 82.72, 83.01, 83.28, 83.56, 83.84, 84.11, 84.39, 84.65,
                  84.92, 85.19, 85.47, 85.74, 86.01, 86.29, 86.57, 86.84, 87.13, 87.41,
                  87.69, 87.96, 88.24, 88.51, 88.79, 89.05, 89.33, 89.6, 89.87, 90.14,
                  90.42, 90.7, 90.98, 91.25, 91.54, 91.81, 92.09, 92.37, 92.65, 92.91,
                  93.18, 93.45, 93.73, 93.99, 94.26, 94.53, 94.81, 95.08, 95.35, 95.61,
                  95.9, 96.17, 96.46, 96.73, 97.01, 97.27, 97.55, 97.81, 98.09, 98.35,
                  98.64, 98.91, 99.2, 99.47, 99.73, 100., 100.28, 100.54, 100.82, 101.08,
                  101.36, 101.63, 101.9, 102.17, 102.44, 102.71, 102.99, 103.26, 103.54, 103.82,
                  104.1, 104.37, 104.64, 104.91, 105.19, 105.45, 105.72, 105.99, 106.27, 106.54,
                  106.81, 107.08, 107.35, 107.62, 107.89, 108.16, 108.44, 108.72, 109., 109.27,
                  109.55, 109.83, 110.11, 110.37, 110.64, 110.91, 111.18, 111.45, 111.73, 111.99,
                  112.27, 112.54, 112.81, 113.08, 113.35, 113.62, 113.9, 114.18, 114.46, 114.73,
                  115.01, 115.28, 115.55, 115.82, 116.09, 116.36, 116.63, 116.9, 117.18, 117.44,
                  117.72, 117.98, 118.26, 118.53, 118.8, 119.07, 119.34, 119.61, 119.88, 120.14,
                  120.42, 120.68, 120.96, 121.23, 121.5, 121.76, 122.03, 122.3, 122.58, 122.84,
                  123.12, 123.39, 123.65, 123.92, 124.19, 124.46, 124.74, 125., 125.28, 125.55,
                  125.83, 126.1, 126.38, 126.66, 126.93, 127.2, 127.47, 127.74, 128.01, 128.28,
                  128.56, 128.83, 129.1, 129.37, 129.64, 129.92, 130.2, 130.47, 130.75, 131.03,
                  131.32, 131.58, 131.85, 132.12, 132.4, 132.66, 132.93, 133.2, 133.48, 133.75,
                  134.02, 134.29, 134.56, 134.83, 135.1, 135.38, 135.66, 135.93, 136.21, 136.49,
                  136.76, 137.03, 137.3, 137.58, 137.85, 138.11, 138.38, 138.65, 138.93, 139.19,
                  139.47, 139.73, 140.01, 140.28, 140.55, 140.82, 141.09, 141.37, 141.64, 141.92,
                  142.2, 142.46, 142.74, 143., 143.28, 143.54, 143.82, 144.08, 144.36, 144.63,
                  144.9, 145.17, 145.44, 145.72, 146., 146.27, 146.56, 146.83, 147.11, 147.38,
                  147.65, 147.92, 148.19, 148.46, 148.74, 149., 149.27, 149.55, 149.82, 150.09,
                  150.36, 150.63, 150.9, 151.18, 151.46, 151.73, 152.01, 152.28, 152.55, 152.82,
                  153.09, 153.36, 153.64, 153.9, 154.18, 154.44, 154.72, 154.98, 155.26, 155.52,
                  155.8, 156.07, 156.34, 156.61, 156.88, 157.15, 157.42, 157.7, 157.98, 158.26,
                  158.54, 158.81, 159.09, 159.37, 159.65, 159.92, 160.19, 160.46, 160.74, 161.01,
                  161.28, 161.55, 161.82, 162.09, 162.37, 162.65, 162.93, 163.2, 163.48, 163.76,
                  164.04, 164.32, 164.6, 164.87, 165.14, 165.41, 165.68, 165.95, 166.23, 166.49,
                  166.76, 167.04, 167.31, 167.58, 167.85, 168.12, 168.4, 168.68, 168.96, 169.24,
                  169.51, 169.79, 170.07, 170.35, 170.63, 170.91, 171.18, 171.45, 171.72, 171.99,
                  172.27, 172.54, 172.81, 173.08, 173.35, 173.61, 173.87, 174.12, 174.38, 174.64,
                  174.9, 175.16, 175.42, 175.68, 175.95, 176.21, 176.48, 176.75, 177.01, 177.28,
                  177.56, 177.83, 178.1, 178.36, 178.64, 178.91, 179.18, 179.44, 179.72, 179.98,
                  180.24, 180.5, 180.77, 181.04, 181.31, 181.57, 181.85, 182.11, 182.39, 182.66,
                  182.92, 183.2, 183.46, 183.74, 184.01, 184.27, 184.54, 184.79, 185.06, 185.34,
                  185.6, 185.87, 186.15, 186.41, 186.69, 186.96, 187.23, 187.49, 187.76, 188.04,
                  188.31, 188.58, 188.85, 189.12, 189.39, 189.66, 189.94, 190.21, 190.5, 190.78,
                  191.05, 191.33, 191.6, 191.87, 192.14, 192.41, 192.69, 192.96, 193.23, 193.5,
                  193.78, 194.06, 194.34, 194.61, 194.89, 195.17, 195.45, 195.71, 195.99, 196.26,
                  196.53, 196.8, 197.07, 197.34, 197.61, 197.88, 198.14, 198.42, 198.68, 198.96,
                  199.22, 199.5, 199.76, 200.04, 200.3, 200.58, 200.84, 201.11, 201.38, 201.65,
                  201.91, 202.16, 202.69, 202.95, 203.21, 203.46, 203.74, 204.01, 204.27, 204.54,
                  204.81, 205.08, 205.36, 205.62, 205.9, 206.17, 206.44, 206.7, 206.97, 207.24,
                  207.52, 207.79, 208.06, 208.33, 208.59, 208.88, 209.15, 209.44, 209.72, 209.99,
                  210.28, 210.55, 210.82, 211.09, 211.36, 211.63, 211.91, 212.17, 212.46, 212.73,
                  213.02, 213.29, 213.57, 213.85, 214.13, 214.4, 214.67, 214.94, 215.22, 215.48,
                  215.76, 216.03, 216.3, 216.56, 216.84, 217.12, 217.4, 217.67, 217.95, 218.23,
                  218.51, 218.77, 219.05, 219.31, 219.59, 219.85, 220.13, 220.39, 220.67, 220.94,
                  221.22, 221.49, 221.78, 222.04, 222.32, 222.58, 222.86, 223.12, 223.4, 223.67,
                  223.94, 224.2, 224.48, 224.75, 225.02, 225.29, 225.57, 225.85, 226.12, 226.4,
                  226.68, 226.97, 227.25, 227.52, 227.81, 228.07, 228.35, 228.61, 228.89, 229.15,
                  229.43, 229.7, 229.97, 230.24, 230.5, 230.78, 231.05, 231.32, 231.61, 231.88,
                  232.17, 232.44, 232.72, 232.99, 233.26, 233.53, 233.81, 234.07, 234.35, 234.62,
                  234.9, 235.17, 235.46, 235.73, 236.02, 236.29, 236.56, 236.83, 237.11, 237.37,
                  237.64, 237.91, 238.19, 238.45, 238.72, 238.99, 239.27, 239.53, 239.8, 240.07,
                  240.35, 240.61, 240.89, 241.15, 241.43, 241.7, 241.97, 242.23, 242.51, 242.78,
                  243.05, 243.31, 243.59, 243.86, 244.13, 244.4, 244.67, 244.94, 245.22, 245.49,
                  245.78, 246.05, 246.33, 246.61, 246.9, 247.2, 247.49, 247.77, 248.06, 248.35,
                  248.66, 248.98, 249.29, 249.59, 249.91, 250.21, 250.54, 250.86, 251.17, 251.5,
                  251.81, 252.13, 252.46, 252.77, 253.1, 253.42])
    ), 'beat_data.beat_times different than expected'
    assert np.array_equal(
        beat_data.beat_positions, np.array(
            [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
             1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2])
    ), 'beat_data.beat_positions different from expected'


def test_load_chords():
    chords_path = (
        'resources/mir_datasets/MTG_JAAH/labs/airegin.lab'
    )
    chord_data = MTG_JAAH.load_chords(chords_path)
    print(chord_data.intervals[:, 0], chord_data.intervals[:, 1], chord_data.labels)
    assert type(chord_data) == utils.ChordData
    assert type(chord_data.intervals) == np.ndarray
    assert type(chord_data.labels) == list

    assert np.array_equal(
        chord_data.intervals[:, 0], np.array(
            [0., 0.41, 1.22, 2.56, 3.34, 4.67, 5.47, 6.83, 7.91, 8.99, 10.07, 11.12, 12.21, 13.29, 14.36, 15.48, 17.66,
             18.74, 19.28, 19.83, 20.94, 21.49, 22.03, 23.13, 23.68, 24.23, 26.39, 27.47, 28.55, 29.63, 30.16, 30.72,
             31.82, 32.91, 33.99, 35.07, 36.14, 37.24, 39.42, 40.5, 41.04, 41.59, 42.7, 43.8, 44.88, 45.96, 47.09,
             47.64, 48.19, 49.3, 50.41, 51.5, 52.59, 53.71, 54.82, 57., 58.1, 58.66, 59.21, 60.32, 60.86, 61.4, 62.52,
             63.07, 63.62, 65.79, 66.9, 68.02, 69.1, 69.65, 70.19, 71.27, 72.35, 73.43, 74.55, 75.63, 76.71, 78.91,
             79.99, 80.53, 81.07, 82.17, 83.28, 84.39, 85.47, 86.57, 87.13, 87.69, 88.79, 89.87, 90.98, 92.09, 93.18,
             94.26, 96.46, 97.55, 98.09, 98.64, 99.73, 100.28, 100.82, 101.9, 102.44, 102.99, 105.19, 106.27, 107.35,
             108.44, 109., 109.55, 110.64, 111.73, 112.81, 113.9, 115.01, 116.09, 118.26, 119.34, 119.88, 120.42, 121.5,
             122.58, 123.65, 124.74, 125.83, 126.38, 126.93, 128.01, 129.1, 130.2, 131.32, 132.4, 133.48, 135.66,
             136.76, 137.3, 137.85, 138.93, 139.47, 140.01, 141.09, 141.64, 142.2, 144.36, 145.44, 146.56, 147.65,
             148.19, 148.74, 149.82, 150.9, 152.01, 153.09, 154.18, 155.26, 157.42, 158.54, 159.09, 159.65, 160.74,
             161.82, 162.93, 164.04, 165.14, 165.68, 166.23, 167.31, 168.4, 169.51, 170.63, 171.72, 172.81, 174.9,
             187.76, 188.85, 189.94, 191.05, 192.14, 193.23, 194.34, 196.53, 203.21, 204.27, 205.36, 206.44, 207.52,
             208.59, 209.72, 211.91, 213.02, 213.57, 214.13, 215.22, 215.76, 216.3, 217.4, 217.95, 218.51, 220.67,
             221.78, 222.86, 223.94, 224.48, 225.02, 226.12, 227.25, 228.35, 229.43, 230.5, 231.61, 233.81, 234.9,
             235.46, 236.02, 237.11, 238.19, 239.27, 240.35, 241.15, 242.51, 243.31, 244.67, 245.49, 246.9, 247.77,
             249.29, 249.59])
    )
    assert np.array_equal(
        chord_data.intervals[:, 1], np.array(
            [0.41, 1.22, 2.56, 3.34, 4.67, 5.47, 6.83, 7.91, 8.99, 10.07, 11.12, 12.21, 13.29, 14.36, 15.48, 17.66,
             18.74, 19.28, 19.83, 20.94, 21.49, 22.03, 23.13, 23.68, 24.23, 26.39, 27.47, 28.55, 29.63, 30.16, 30.72,
             31.82, 32.91, 33.99, 35.07, 36.14, 37.24, 39.42, 40.5, 41.04, 41.59, 42.7, 43.8, 44.88, 45.96, 47.09,
             47.64, 48.19, 49.3, 50.41, 51.5, 52.59, 53.71, 54.82, 57., 58.1, 58.66, 59.21, 60.32, 60.86, 61.4, 62.52,
             63.07, 63.62, 65.79, 66.9, 68.02, 69.1, 69.65, 70.19, 71.27, 72.35, 73.43, 74.55, 75.63, 76.71, 78.91,
             79.99, 80.53, 81.07, 82.17, 83.28, 84.39, 85.47, 86.57, 87.13, 87.69, 88.79, 89.87, 90.98, 92.09, 93.18,
             94.26, 96.46, 97.55, 98.09, 98.64, 99.73, 100.28, 100.82, 101.9, 102.44, 102.99, 105.19, 106.27, 107.35,
             108.44, 109., 109.55, 110.64, 111.73, 112.81, 113.9, 115.01, 116.09, 118.26, 119.34, 119.88, 120.42, 121.5,
             122.58, 123.65, 124.74, 125.83, 126.38, 126.93, 128.01, 129.1, 130.2, 131.32, 132.4, 133.48, 135.66,
             136.76, 137.3, 137.85, 138.93, 139.47, 140.01, 141.09, 141.64, 142.2, 144.36, 145.44, 146.56, 147.65,
             148.19, 148.74, 149.82, 150.9, 152.01, 153.09, 154.18, 155.26, 157.42, 158.54, 159.09, 159.65, 160.74,
             161.82, 162.93, 164.04, 165.14, 165.68, 166.23, 167.31, 168.4, 169.51, 170.63, 171.72, 172.81, 174.9,
             187.76, 188.85, 189.94, 191.05, 192.14, 193.23, 194.34, 196.53, 203.21, 204.27, 205.36, 206.44, 207.52,
             208.59, 209.72, 211.91, 213.02, 213.57, 214.13, 215.22, 215.76, 216.3, 217.4, 217.95, 218.51, 220.67,
             221.78, 222.86, 223.94, 224.48, 225.02, 226.12, 227.25, 228.35, 229.43, 230.5, 231.61, 233.81, 234.9,
             235.46, 236.02, 237.11, 238.19, 239.27, 240.35, 241.15, 242.51, 243.31, 244.67, 245.49, 246.9, 247.77,
             249.29, 249.59, 255.59])
    )
    assert np.array_equal(chord_data.labels, np.array(
        ['N', 'F:(b3,5,b7,11)', 'Eb:(b3,5,b7,11)', 'F:(b3,5,b7,11)', 'C:(b3,5,b7,11)', 'F:(b3,5,b7,11)',
         'Eb:(b3,5,b7,11)', 'F:(b3,5,b7,11)', 'F:min7', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7',
         'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:maj7', 'C#:min7', 'F#:7', 'B:maj7', 'C:min7', 'F:7', 'Bb:maj7',
         'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7',
         'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:hdim7', 'F:7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7',
         'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:maj7',
         'C#:min7', 'F#:7', 'B:maj7', 'C:min7', 'F:7', 'Bb:maj7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7',
         'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:hdim7',
         'F:7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min',
         'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:maj7', 'C#:min7', 'F#:7', 'B:maj7', 'C:min7', 'F:7',
         'Bb:maj7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min',
         'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:hdim7', 'F:7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7',
         'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:maj7',
         'C#:min7', 'F#:7', 'B:maj7', 'C:min7', 'F:7', 'Bb:maj7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7',
         'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:hdim7',
         'F:7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min',
         'F:7', 'Bb:min7', 'N', 'F:min', 'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'N', 'F:min',
         'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:maj7', 'C#:min7',
         'F#:7', 'B:maj7', 'C:min7', 'F:7', 'Bb:maj7', 'Bb:min7', 'Eb:7', 'Ab:maj7', 'G:hdim7', 'C:7', 'F:min',
         'C:(3,5,b7,#9)', 'F:min', 'F:7', 'Bb:min', 'F:7', 'Bb:min7', 'C#:maj7', 'D:min7', 'G:7', 'C:hdim7', 'F:7',
         'Bb:min7', 'Eb:7', 'F:(b3,5,b7,11)', 'Eb:(b3,5,b7,11)', 'F:(b3,5,b7,11)', 'C:(b3,5,b7,11)', 'F:(b3,5,b7,11)',
         'Eb:(b3,5,b7,11)', 'F:(b3,5,b7,11)', 'N', 'F:min7', 'N']))


def test_load_sections():
    sections_path = (
        'resources/mir_datasets/MTG_JAAH/annotations/airegin.json'
    )
    section_data = MTG_JAAH.load_sections(sections_path)

    assert type(section_data) == utils.SectionData
    assert type(section_data.intervals) == np.ndarray
    assert type(section_data.labels) == list

    assert np.array_equal(section_data.intervals[:, 0],
                          np.array([0.41, 8.99, 48.19, 87.69, 126.93, 166.23, 202.95, 240.07]))
    assert np.array_equal(section_data.intervals[:, 1],
                          np.array([08.71, 47.92, 87.41, 126.66, 165.95, 202.69, 239.8, 253.42]))
    assert np.array_equal(section_data.labels, np.array(
        ['Intro', 'Head - ABAC', 'Trumpet Solo - ABAC', 'Trombone Solo - ABAC', 'Tenor Sax Solo - ABAC',
         'Ensemble, Percussion Solo - ABAC', 'Head - ABAC', 'Coda']))
